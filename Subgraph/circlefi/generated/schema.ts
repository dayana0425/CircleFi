// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class SavingCircle extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save SavingCircle entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type SavingCircle must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("SavingCircle", id.toString(), this);
    }
  }

  static load(id: string): SavingCircle | null {
    return changetype<SavingCircle | null>(store.get("SavingCircle", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get circleName(): string {
    let value = this.get("circleName");
    return value!.toString();
  }

  set circleName(value: string) {
    this.set("circleName", Value.fromString(value));
  }

  get frequency(): string {
    let value = this.get("frequency");
    return value!.toString();
  }

  set frequency(value: string) {
    this.set("frequency", Value.fromString(value));
  }

  get host(): Bytes {
    let value = this.get("host");
    return value!.toBytes();
  }

  set host(value: Bytes) {
    this.set("host", Value.fromBytes(value));
  }

  get description(): string | null {
    let value = this.get("description");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set description(value: string | null) {
    if (!value) {
      this.unset("description");
    } else {
      this.set("description", Value.fromString(<string>value));
    }
  }

  get imageURL(): string | null {
    let value = this.get("imageURL");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set imageURL(value: string | null) {
    if (!value) {
      this.unset("imageURL");
    } else {
      this.set("imageURL", Value.fromString(<string>value));
    }
  }

  get groupSize(): BigInt {
    let value = this.get("groupSize");
    return value!.toBigInt();
  }

  set groupSize(value: BigInt) {
    this.set("groupSize", Value.fromBigInt(value));
  }

  get saveAmount(): BigInt {
    let value = this.get("saveAmount");
    return value!.toBigInt();
  }

  set saveAmount(value: BigInt) {
    this.set("saveAmount", Value.fromBigInt(value));
  }

  get payTime(): BigInt {
    let value = this.get("payTime");
    return value!.toBigInt();
  }

  set payTime(value: BigInt) {
    this.set("payTime", Value.fromBigInt(value));
  }

  get stage(): string {
    let value = this.get("stage");
    return value!.toString();
  }

  set stage(value: string) {
    this.set("stage", Value.fromString(value));
  }

  get round(): BigInt {
    let value = this.get("round");
    return value!.toBigInt();
  }

  set round(value: BigInt) {
    this.set("round", Value.fromBigInt(value));
  }

  get roundStartTime(): BigInt {
    let value = this.get("roundStartTime");
    return value!.toBigInt();
  }

  set roundStartTime(value: BigInt) {
    this.set("roundStartTime", Value.fromBigInt(value));
  }

  get participantCounter(): BigInt {
    let value = this.get("participantCounter");
    return value!.toBigInt();
  }

  set participantCounter(value: BigInt) {
    this.set("participantCounter", Value.fromBigInt(value));
  }

  get paidCounter(): BigInt {
    let value = this.get("paidCounter");
    return value!.toBigInt();
  }

  set paidCounter(value: BigInt) {
    this.set("paidCounter", Value.fromBigInt(value));
  }

  get paidDepositCounter(): BigInt {
    let value = this.get("paidDepositCounter");
    return value!.toBigInt();
  }

  set paidDepositCounter(value: BigInt) {
    this.set("paidDepositCounter", Value.fromBigInt(value));
  }

  get paidOut(): boolean {
    let value = this.get("paidOut");
    return value!.toBoolean();
  }

  set paidOut(value: boolean) {
    this.set("paidOut", Value.fromBoolean(value));
  }

  get everyonePaidDeposit(): boolean {
    let value = this.get("everyonePaidDeposit");
    return value!.toBoolean();
  }

  set everyonePaidDeposit(value: boolean) {
    this.set("everyonePaidDeposit", Value.fromBoolean(value));
  }

  get participantAddresses(): Array<string> | null {
    let value = this.get("participantAddresses");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set participantAddresses(value: Array<string> | null) {
    if (!value) {
      this.unset("participantAddresses");
    } else {
      this.set(
        "participantAddresses",
        Value.fromStringArray(<Array<string>>value)
      );
    }
  }
}

export class ParticipantsRegistered extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save ParticipantsRegistered entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ParticipantsRegistered must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ParticipantsRegistered", id.toString(), this);
    }
  }

  static load(id: string): ParticipantsRegistered | null {
    return changetype<ParticipantsRegistered | null>(
      store.get("ParticipantsRegistered", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get attendee(): string {
    let value = this.get("attendee");
    return value!.toString();
  }

  set attendee(value: string) {
    this.set("attendee", Value.fromString(value));
  }

  get circle(): string {
    let value = this.get("circle");
    return value!.toString();
  }

  set circle(value: string) {
    this.set("circle", Value.fromString(value));
  }
}

export class Hosting extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Hosting entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Hosting must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Hosting", id.toString(), this);
    }
  }

  static load(id: string): Hosting | null {
    return changetype<Hosting | null>(store.get("Hosting", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get host(): string {
    let value = this.get("host");
    return value!.toString();
  }

  set host(value: string) {
    this.set("host", Value.fromString(value));
  }

  get circle(): string {
    let value = this.get("circle");
    return value!.toString();
  }

  set circle(value: string) {
    this.set("circle", Value.fromString(value));
  }
}

export class Account extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Account entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Account must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Account", id.toString(), this);
    }
  }

  static load(id: string): Account | null {
    return changetype<Account | null>(store.get("Account", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get totalCurrentCircles(): BigInt {
    let value = this.get("totalCurrentCircles");
    return value!.toBigInt();
  }

  set totalCurrentCircles(value: BigInt) {
    this.set("totalCurrentCircles", Value.fromBigInt(value));
  }

  get totalCompletedCircles(): BigInt {
    let value = this.get("totalCompletedCircles");
    return value!.toBigInt();
  }

  set totalCompletedCircles(value: BigInt) {
    this.set("totalCompletedCircles", Value.fromBigInt(value));
  }

  get totalHostedCircles(): BigInt {
    let value = this.get("totalHostedCircles");
    return value!.toBigInt();
  }

  set totalHostedCircles(value: BigInt) {
    this.set("totalHostedCircles", Value.fromBigInt(value));
  }

  get currentCircles(): Array<string> | null {
    let value = this.get("currentCircles");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set currentCircles(value: Array<string> | null) {
    if (!value) {
      this.unset("currentCircles");
    } else {
      this.set("currentCircles", Value.fromStringArray(<Array<string>>value));
    }
  }

  get hosting(): Array<string> | null {
    let value = this.get("hosting");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set hosting(value: Array<string> | null) {
    if (!value) {
      this.unset("hosting");
    } else {
      this.set("hosting", Value.fromStringArray(<Array<string>>value));
    }
  }
}
