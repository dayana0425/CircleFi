// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AllRoundsCompleted extends ethereum.Event {
  get params(): AllRoundsCompleted__Params {
    return new AllRoundsCompleted__Params(this);
  }
}

export class AllRoundsCompleted__Params {
  _event: AllRoundsCompleted;

  constructor(event: AllRoundsCompleted) {
    this._event = event;
  }

  get circleId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }
}

export class CompleteCircle extends ethereum.Event {
  get params(): CompleteCircle__Params {
    return new CompleteCircle__Params(this);
  }
}

export class CompleteCircle__Params {
  _event: CompleteCircle;

  constructor(event: CompleteCircle) {
    this._event = event;
  }

  get circleId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }
}

export class EmergencyWithdrawal extends ethereum.Event {
  get params(): EmergencyWithdrawal__Params {
    return new EmergencyWithdrawal__Params(this);
  }
}

export class EmergencyWithdrawal__Params {
  _event: EmergencyWithdrawal;

  constructor(event: EmergencyWithdrawal) {
    this._event = event;
  }

  get circleId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get totalFunds(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get participantAddress(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get sentFunds(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class EveryonePaid extends ethereum.Event {
  get params(): EveryonePaid__Params {
    return new EveryonePaid__Params(this);
  }
}

export class EveryonePaid__Params {
  _event: EveryonePaid;

  constructor(event: EveryonePaid) {
    this._event = event;
  }

  get circleId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get amountPaid(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class EveryonePaidDeposit extends ethereum.Event {
  get params(): EveryonePaidDeposit__Params {
    return new EveryonePaidDeposit__Params(this);
  }
}

export class EveryonePaidDeposit__Params {
  _event: EveryonePaidDeposit;

  constructor(event: EveryonePaidDeposit) {
    this._event = event;
  }

  get circleId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }
}

export class NewSavingCircleCreated extends ethereum.Event {
  get params(): NewSavingCircleCreated__Params {
    return new NewSavingCircleCreated__Params(this);
  }
}

export class NewSavingCircleCreated__Params {
  _event: NewSavingCircleCreated;

  constructor(event: NewSavingCircleCreated) {
    this._event = event;
  }

  get circleId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get circleCid(): string {
    return this._event.parameters[1].value.toString();
  }

  get host(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get payTime(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get saveAmount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get groupSize(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get participantAddresses(): Array<Address> {
    return this._event.parameters[6].value.toAddressArray();
  }

  get possibleWinnerAddresses(): Array<Address> {
    return this._event.parameters[7].value.toAddressArray();
  }

  get stats(): NewSavingCircleCreatedStatsStruct {
    return changetype<NewSavingCircleCreatedStatsStruct>(
      this._event.parameters[8].value.toTuple()
    );
  }
}

export class NewSavingCircleCreatedStatsStruct extends ethereum.Tuple {
  get stage(): i32 {
    return this[0].toI32();
  }

  get roundStartTime(): BigInt {
    return this[1].toBigInt();
  }

  get participantCounter(): BigInt {
    return this[2].toBigInt();
  }

  get paidCounter(): BigInt {
    return this[3].toBigInt();
  }

  get paidDepositCounter(): BigInt {
    return this[4].toBigInt();
  }

  get roundCounter(): BigInt {
    return this[5].toBigInt();
  }

  get paidOut(): boolean {
    return this[6].toBoolean();
  }

  get everyonePaidDeposit(): boolean {
    return this[7].toBoolean();
  }
}

export class PaidRound extends ethereum.Event {
  get params(): PaidRound__Params {
    return new PaidRound__Params(this);
  }
}

export class PaidRound__Params {
  _event: PaidRound;

  constructor(event: PaidRound) {
    this._event = event;
  }

  get circleId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get participant(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class PartiallyPaidRound extends ethereum.Event {
  get params(): PartiallyPaidRound__Params {
    return new PartiallyPaidRound__Params(this);
  }
}

export class PartiallyPaidRound__Params {
  _event: PartiallyPaidRound;

  constructor(event: PartiallyPaidRound) {
    this._event = event;
  }

  get circleId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get participant(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amountPaid(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class RegisteredNewUserAndPaidDeposit extends ethereum.Event {
  get params(): RegisteredNewUserAndPaidDeposit__Params {
    return new RegisteredNewUserAndPaidDeposit__Params(this);
  }
}

export class RegisteredNewUserAndPaidDeposit__Params {
  _event: RegisteredNewUserAndPaidDeposit;

  constructor(event: RegisteredNewUserAndPaidDeposit) {
    this._event = event;
  }

  get circleId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get participant(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class RoundEndedAndUserWasPaidOut extends ethereum.Event {
  get params(): RoundEndedAndUserWasPaidOut__Params {
    return new RoundEndedAndUserWasPaidOut__Params(this);
  }
}

export class RoundEndedAndUserWasPaidOut__Params {
  _event: RoundEndedAndUserWasPaidOut;

  constructor(event: RoundEndedAndUserWasPaidOut) {
    this._event = event;
  }

  get circleId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get winner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get success(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class StartedFirstRound extends ethereum.Event {
  get params(): StartedFirstRound__Params {
    return new StartedFirstRound__Params(this);
  }
}

export class StartedFirstRound__Params {
  _event: StartedFirstRound;

  constructor(event: StartedFirstRound) {
    this._event = event;
  }

  get circleId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get participant(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class SimpleSavingCircle extends ethereum.SmartContract {
  static bind(address: Address): SimpleSavingCircle {
    return new SimpleSavingCircle("SimpleSavingCircle", address);
  }

  fee(): BigInt {
    let result = super.call("fee", "fee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_fee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("fee", "fee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRandomNumber(): Bytes {
    let result = super.call(
      "getRandomNumber",
      "getRandomNumber():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_getRandomNumber(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getRandomNumber",
      "getRandomNumber():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  keyHash(): Bytes {
    let result = super.call("keyHash", "keyHash():(bytes32)", []);

    return result[0].toBytes();
  }

  try_keyHash(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("keyHash", "keyHash():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  randomResult(): BigInt {
    let result = super.call("randomResult", "randomResult():(uint256)", []);

    return result[0].toBigInt();
  }

  try_randomResult(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("randomResult", "randomResult():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CompleteCircleCall extends ethereum.Call {
  get inputs(): CompleteCircleCall__Inputs {
    return new CompleteCircleCall__Inputs(this);
  }

  get outputs(): CompleteCircleCall__Outputs {
    return new CompleteCircleCall__Outputs(this);
  }
}

export class CompleteCircleCall__Inputs {
  _call: CompleteCircleCall;

  constructor(call: CompleteCircleCall) {
    this._call = call;
  }

  get circleId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class CompleteCircleCall__Outputs {
  _call: CompleteCircleCall;

  constructor(call: CompleteCircleCall) {
    this._call = call;
  }
}

export class CreateSavingCircleCall extends ethereum.Call {
  get inputs(): CreateSavingCircleCall__Inputs {
    return new CreateSavingCircleCall__Inputs(this);
  }

  get outputs(): CreateSavingCircleCall__Outputs {
    return new CreateSavingCircleCall__Outputs(this);
  }
}

export class CreateSavingCircleCall__Inputs {
  _call: CreateSavingCircleCall;

  constructor(call: CreateSavingCircleCall) {
    this._call = call;
  }

  get _saveAmountPerRound(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _groupSize(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _payTime(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get cid(): string {
    return this._call.inputValues[3].value.toString();
  }
}

export class CreateSavingCircleCall__Outputs {
  _call: CreateSavingCircleCall;

  constructor(call: CreateSavingCircleCall) {
    this._call = call;
  }
}

export class EmergencyWithdrawalCall extends ethereum.Call {
  get inputs(): EmergencyWithdrawalCall__Inputs {
    return new EmergencyWithdrawalCall__Inputs(this);
  }

  get outputs(): EmergencyWithdrawalCall__Outputs {
    return new EmergencyWithdrawalCall__Outputs(this);
  }
}

export class EmergencyWithdrawalCall__Inputs {
  _call: EmergencyWithdrawalCall;

  constructor(call: EmergencyWithdrawalCall) {
    this._call = call;
  }

  get circleId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class EmergencyWithdrawalCall__Outputs {
  _call: EmergencyWithdrawalCall;

  constructor(call: EmergencyWithdrawalCall) {
    this._call = call;
  }
}

export class EndRoundAndStartNextRoundCall extends ethereum.Call {
  get inputs(): EndRoundAndStartNextRoundCall__Inputs {
    return new EndRoundAndStartNextRoundCall__Inputs(this);
  }

  get outputs(): EndRoundAndStartNextRoundCall__Outputs {
    return new EndRoundAndStartNextRoundCall__Outputs(this);
  }
}

export class EndRoundAndStartNextRoundCall__Inputs {
  _call: EndRoundAndStartNextRoundCall;

  constructor(call: EndRoundAndStartNextRoundCall) {
    this._call = call;
  }

  get circleId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class EndRoundAndStartNextRoundCall__Outputs {
  _call: EndRoundAndStartNextRoundCall;

  constructor(call: EndRoundAndStartNextRoundCall) {
    this._call = call;
  }
}

export class ExtendDeadlineCall extends ethereum.Call {
  get inputs(): ExtendDeadlineCall__Inputs {
    return new ExtendDeadlineCall__Inputs(this);
  }

  get outputs(): ExtendDeadlineCall__Outputs {
    return new ExtendDeadlineCall__Outputs(this);
  }
}

export class ExtendDeadlineCall__Inputs {
  _call: ExtendDeadlineCall;

  constructor(call: ExtendDeadlineCall) {
    this._call = call;
  }

  get circleId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class ExtendDeadlineCall__Outputs {
  _call: ExtendDeadlineCall;

  constructor(call: ExtendDeadlineCall) {
    this._call = call;
  }
}

export class GetRandomNumberCall extends ethereum.Call {
  get inputs(): GetRandomNumberCall__Inputs {
    return new GetRandomNumberCall__Inputs(this);
  }

  get outputs(): GetRandomNumberCall__Outputs {
    return new GetRandomNumberCall__Outputs(this);
  }
}

export class GetRandomNumberCall__Inputs {
  _call: GetRandomNumberCall;

  constructor(call: GetRandomNumberCall) {
    this._call = call;
  }
}

export class GetRandomNumberCall__Outputs {
  _call: GetRandomNumberCall;

  constructor(call: GetRandomNumberCall) {
    this._call = call;
  }

  get requestId(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class MakePaymentCall extends ethereum.Call {
  get inputs(): MakePaymentCall__Inputs {
    return new MakePaymentCall__Inputs(this);
  }

  get outputs(): MakePaymentCall__Outputs {
    return new MakePaymentCall__Outputs(this);
  }
}

export class MakePaymentCall__Inputs {
  _call: MakePaymentCall;

  constructor(call: MakePaymentCall) {
    this._call = call;
  }

  get circleId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class MakePaymentCall__Outputs {
  _call: MakePaymentCall;

  constructor(call: MakePaymentCall) {
    this._call = call;
  }
}

export class RawFulfillRandomnessCall extends ethereum.Call {
  get inputs(): RawFulfillRandomnessCall__Inputs {
    return new RawFulfillRandomnessCall__Inputs(this);
  }

  get outputs(): RawFulfillRandomnessCall__Outputs {
    return new RawFulfillRandomnessCall__Outputs(this);
  }
}

export class RawFulfillRandomnessCall__Inputs {
  _call: RawFulfillRandomnessCall;

  constructor(call: RawFulfillRandomnessCall) {
    this._call = call;
  }

  get requestId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get randomness(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RawFulfillRandomnessCall__Outputs {
  _call: RawFulfillRandomnessCall;

  constructor(call: RawFulfillRandomnessCall) {
    this._call = call;
  }
}

export class RegisterToSavingCircleCall extends ethereum.Call {
  get inputs(): RegisterToSavingCircleCall__Inputs {
    return new RegisterToSavingCircleCall__Inputs(this);
  }

  get outputs(): RegisterToSavingCircleCall__Outputs {
    return new RegisterToSavingCircleCall__Outputs(this);
  }
}

export class RegisterToSavingCircleCall__Inputs {
  _call: RegisterToSavingCircleCall;

  constructor(call: RegisterToSavingCircleCall) {
    this._call = call;
  }

  get circleId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class RegisterToSavingCircleCall__Outputs {
  _call: RegisterToSavingCircleCall;

  constructor(call: RegisterToSavingCircleCall) {
    this._call = call;
  }
}

export class StartFirstRoundCall extends ethereum.Call {
  get inputs(): StartFirstRoundCall__Inputs {
    return new StartFirstRoundCall__Inputs(this);
  }

  get outputs(): StartFirstRoundCall__Outputs {
    return new StartFirstRoundCall__Outputs(this);
  }
}

export class StartFirstRoundCall__Inputs {
  _call: StartFirstRoundCall;

  constructor(call: StartFirstRoundCall) {
    this._call = call;
  }

  get circleId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class StartFirstRoundCall__Outputs {
  _call: StartFirstRoundCall;

  constructor(call: StartFirstRoundCall) {
    this._call = call;
  }
}
